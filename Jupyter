{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "J6wpL84HuX3Z"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "*Press Ctrl + F9 if you want to run it all at once*"
      ],
      "metadata": {
        "id": "mFqSjZUDah-x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section - Easy one with Seaborn"
      ],
      "metadata": {
        "id": "J6wpL84HuX3Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from scipy import stats\n",
        "import warnings\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "#sns.set(rc={'figure.figsize':(11.7,8.27)})\n",
        "\n",
        "df_train = pd.read_csv(\"data_loadsmith.csv\")\n",
        "\n",
        "sns.distplot(df_train[\"Bookings\"]) ##Distribution Plot\n",
        "\n",
        "#sns.set(font_scale=1.25) \n",
        "\n",
        "#    *hm = sns.heatmap(cm, cbar=True, annot=True, fmt=\".2f\", annot_kws={\"size\":10}, yticklabels=cols.values, xticklabels=cols.values)\n",
        "#   plt.show()**/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "wJTO3fRUuc24",
        "outputId": "2a047840-43c0-417b-8053-911b50f62d52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d3ff14f90>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Run this first! 🙂"
      ],
      "metadata": {
        "id": "EW98hT1EfSPl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Refactoring coding - Jonatan Serna\n",
        "\n",
        "\n",
        "\n",
        "#Importing Libraries\n",
        "import warnings\n",
        "import numpy as np\n",
        "import matplotlib.pylab as plt\n",
        "import scipy as sc\n",
        "import pandas as pd\n",
        "from scipy.stats import nbinom, poisson, geom, norm\n",
        "\n",
        "from google.colab import files\n",
        "\n",
        "#Fitting functions\n",
        "\n",
        "def mean_confidence_interval(data, confidence=0.95):\n",
        "      a = 1.0 * np.array(data)\n",
        "      n = len(a)\n",
        "      m, se = np.mean(a), sc.stats.sem(a)\n",
        "      h = se * sc.stats.t.ppf((1 + confidence) / 2., n-1)\n",
        "      return m, m-h, m+h\n",
        "\n",
        "def fit_continuous(data,discrete=False):\n",
        "  if(discrete):\n",
        "    y,x = np.histogram(data,density=True)\n",
        "    x = (x+np.roll(x,-1))[:-1]/2.0\n",
        "\n",
        "    best_distributions=[]\n",
        "    distributions = ['norm','t']\n",
        "\n",
        "    try:\n",
        "      with warnings.catch_warnings():\n",
        "        warnings.filterwarnings('ignore')\n",
        "        for distribution in distributions:\n",
        "          dist = getattr(sc.stats,distribution)\n",
        "          params = dist.fit(data)\n",
        "\n",
        "\n",
        "          #Separating the parameters\n",
        "          params_sep=params[:-2]\n",
        "          loc=params[-2]\n",
        "          scale=params[-1]\n",
        "\n",
        "          #PDF and error\n",
        "\n",
        "          pdf=dist.pdf(x,loc=loc,scale=scale, *params_sep)\n",
        "          sse = np.sum(np.power(y-pdf,2.0))\n",
        "          \n",
        "\n",
        "          best_distributions.append((distribution,list(params),sse))\n",
        "    except Exceptions:\n",
        "      pass\n",
        "    \n",
        "    sorted_best_dist=sorted(best_distributions,key=lambda x:x[2])\n",
        "    if(sorted_best_dist[0][2]<=0.2):\n",
        "      data_stt = pd.Series(data)\n",
        "      print(\"Dataset Information\")\n",
        "      print(\"Mean: \",data_stt.mean())\n",
        "      print(\"Sd: \",np.sqrt(data_stt.var()))\n",
        "\n",
        "      print(\"Fit Information\")\n",
        "      print(\"Best Fit: \",sorted_best_dist[0][0])\n",
        "      print(\"Best Fit params: \",sorted_best_dist[0][1])\n",
        "      print(\"Best Fit SSE: \",sorted_best_dist[0][2])\n",
        "      interval = mean_confidence_interval(data)\n",
        "      print(\"Mean Confidence Interval (95%)\")\n",
        "      print(\"[\",interval[1],\";\", interval[2],\"]\")\n",
        "\n",
        "      best_dist=getattr(sc.stats,sorted_best_dist[0][0])\n",
        "      best_params=sorted_best_dist[0][1]\n",
        "\n",
        "      # Separate best parameters\n",
        "      best_arg = best_params[:-2]\n",
        "      best_loc = best_params[-2]\n",
        "      best_scale = best_params[-1]\n",
        "\n",
        "      # Get sane start and end points of distribution\n",
        "      best_start = best_dist.ppf(0.01, *best_arg, loc=best_loc, scale=best_scale) if best_arg else best_dist.ppf(0.01, loc=best_loc, scale=best_scale)\n",
        "      best_end = best_dist.ppf(0.99, *best_arg, loc=best_loc, scale=best_scale) if best_arg else best_dist.ppf(0.99, loc=best_loc, scale=best_scale)\n",
        "\n",
        "      # Build PDF and turn into pandas Series\n",
        "      best_x = np.linspace(best_start, best_end, num=10000)\n",
        "      best_y = best_dist.pdf(best_x,loc=best_loc, scale=best_scale, *best_arg)\n",
        "      best_pdf = pd.Series(best_y, best_x)\n",
        "\n",
        "      plt.figure(figsize=(8,8))\n",
        "      plt.title('Best distribution \" '+sorted_best_dist[0][0]+' \"')\n",
        "      plt.hist(data,density=True)\n",
        "      best_pdf.plot(lw=2,label=\"Best Fit\",legend=True)\n",
        "      return True\n",
        "    else:\n",
        "      return False\n",
        "  else:\n",
        "    data_stt = pd.Series(data)\n",
        "    print(\"Dataset Information\")\n",
        "    print(\"Mean: \",data_stt.mean())\n",
        "    print(\"Sd: \",np.sqrt(data_stt.var()))\n",
        "\n",
        "    y,x = np.histogram(data,density=True)\n",
        "    x = (x+np.roll(x,-1))[:-1]/2.0\n",
        "\n",
        "    best_distributions=[]\n",
        "    distributions = ['norm','t','expon','gamma']\n",
        "\n",
        "    try:\n",
        "      with warnings.catch_warnings():\n",
        "        warnings.filterwarnings('ignore')\n",
        "        for distribution in distributions:\n",
        "          dist = getattr(sc.stats,distribution)\n",
        "          params = dist.fit(data)\n",
        "\n",
        "\n",
        "          #Separating the parameters\n",
        "          params_sep=params[:-2]\n",
        "          loc=params[-2]\n",
        "          scale=params[-1]\n",
        "\n",
        "          #PDF and error\n",
        "\n",
        "          pdf=dist.pdf(x,loc=loc,scale=scale, *params_sep)\n",
        "          sse = np.sum(np.power(y-pdf,2.0))\n",
        "\n",
        "          best_distributions.append((distribution,list(params),sse))\n",
        "    except Exceptions:\n",
        "      pass\n",
        "\n",
        "    sorted_best_dist=sorted(best_distributions,key=lambda x:x[2])\n",
        "    print(\"Fit Information\")\n",
        "    print(\"Best Fit: \",sorted_best_dist[0][0])\n",
        "    print(\"Best Fit params: \",sorted_best_dist[0][1])\n",
        "    print(\"Best Fit SSE: \",sorted_best_dist[0][2])\n",
        "\n",
        "    best_dist=getattr(sc.stats,sorted_best_dist[0][0])\n",
        "    best_params=sorted_best_dist[0][1]\n",
        "\n",
        "    # Separate best parameters\n",
        "    best_arg = best_params[:-2]\n",
        "    best_loc = best_params[-2]\n",
        "    best_scale = best_params[-1]\n",
        "\n",
        "    # Get sane start and end points of distribution\n",
        "    best_start = best_dist.ppf(0.01, *best_arg, loc=best_loc, scale=best_scale) if best_arg else best_dist.ppf(0.01, loc=best_loc, scale=best_scale)\n",
        "    best_end = best_dist.ppf(0.99, *best_arg, loc=best_loc, scale=best_scale) if best_arg else best_dist.ppf(0.99, loc=best_loc, scale=best_scale)\n",
        "\n",
        "    # Build PDF and turn into pandas Series\n",
        "    best_x = np.linspace(best_start, best_end, num=10000)\n",
        "    best_y = best_dist.pdf(best_x,loc=best_loc, scale=best_scale, *best_arg)\n",
        "    best_pdf = pd.Series(best_y, best_x)\n",
        "\n",
        "    plt.figure(figsize=(8,8))\n",
        "    plt.title('Best distribution \" '+sorted_best_dist[0][0]+' \"')\n",
        "    plt.hist(data,density=True)\n",
        "    best_pdf.plot(lw=2,label=\"Best Fit\",legend=True)\n",
        "    interval = mean_confidence_interval(data)\n",
        "    print(\"Mean Confidence Interval (95%)\")\n",
        "    print(\"[\",interval[1],\";\", interval[2],\"]\")\n",
        "\n",
        "\n",
        "def fit_discrete(data,ignore=False):\n",
        "  \n",
        "  if(ignore):\n",
        "    data_try=False\n",
        "  else:\n",
        "    data_try=fit_continuous(data,discrete=True)\n",
        "\n",
        "  if (data_try==False):\n",
        "    n=len(data)\n",
        "    data_fit=pd.Series(data)\n",
        "    print(\"Dataset Information\")\n",
        "\n",
        "    mean = data_fit.mean()\n",
        "    var = data_fit.var()\n",
        "\n",
        "    print(\"Mean: \",mean)\n",
        "    print(\"Sd: \",np.sqrt(var))\n",
        "\n",
        "    likelihoods = {}\n",
        "    params = {}\n",
        "    try:\n",
        "      with warnings.catch_warnings():\n",
        "        warnings.filterwarnings('ignore')\n",
        "        #Negative Binomial distribution\n",
        "\n",
        "        p_nb = mean/var\n",
        "        r_nb = p_nb*mean / (1-p_nb) \n",
        "\n",
        "        likelihoods['nbinomial'] = np.sum(np.log(np.array(data_fit.map(lambda val: nbinom.pmf(val, r_nb, p_nb)))))\n",
        "        params[\"nbinomial\"] = [r_nb,p_nb]\n",
        "\n",
        "        #Poisson Distribution\n",
        "\n",
        "        lambda_poisson = mean\n",
        "\n",
        "        likelihoods['poisson'] = np.sum(np.log(np.array(data_fit.map(lambda val: poisson.pmf(val, lambda_poisson)))))\n",
        "        params[\"poisson\"] = lambda_poisson\n",
        "\n",
        "        #Geometric Distribution\n",
        "\n",
        "        p_geo=1/mean\n",
        "\n",
        "        likelihoods['geometric'] = np.sum(np.log(np.array(data_fit.map(lambda val: geom.pmf(val, p_geo)))))\n",
        "        params[\"geometric\"] = p_geo\n",
        "  \n",
        "    except Exception:\n",
        "      pass\n",
        "\n",
        "    #Start printing the information\n",
        "    \n",
        "    likelihoods = {k: likelihoods[k] for k in likelihoods if not np.isnan(likelihoods[k])}\n",
        "\n",
        "    best_fit = max(likelihoods, key=lambda x: likelihoods[x])\n",
        "    print(\"Best Fit Information\")\n",
        "    print(\"Best fit:\", best_fit)\n",
        "    print(\"Log Likelihood:\", likelihoods[best_fit])\n",
        "    print(\"Parameters:\", params[best_fit])\n",
        "\n",
        "    interval = mean_confidence_interval(data)\n",
        "    print(\"Mean Confidence Interval (95%)\")\n",
        "    print(\"[\",interval[1],\";\", interval[2],\"]\")\n",
        "    print(\"\\n\\n\")\n",
        "\n",
        "    plt.figure(figsize=(8,8))\n",
        "\n",
        "    plt.hist(data,20,density=True)\n",
        "    k = np.arange(data_fit.min(),data_fit.max()+1)\n",
        "    plt.plot(k,poisson.pmf(k,lambda_poisson),'go', markersize=5,label=\"Poisson\")\n",
        "    plt.plot(k,nbinom.pmf(k,r_nb,p_nb),'go', markersize=5,color=\"red\",label=\"Negative Binomial\")\n",
        "    plt.plot(k,geom.pmf(k,p_geo),'go', markersize=5,color=\"orange\",label=\"Geometric\")\n",
        "\n",
        "    plt.legend()\n",
        "\n",
        "\n",
        "\n",
        "def fit_distribution(data_name,column, continuous=False,ignore=False):\n",
        "#Assigning uploaded CSV to the dataframe variable\n",
        "  data_f=pd.read_csv(data_name)\n",
        "#Changing Columns to Upper Case\n",
        "  column = column.upper()\n",
        "  data_f.columns = data_f.columns.str.upper()\n",
        "\n",
        "  data=data_f[column]\n",
        "  if(continuous):\n",
        "    fit_continuous(data)\n",
        "  else:\n",
        "    fit_discrete(data,ignore)\n",
        "\n",
        "def fit_distribution_test(data, continuous=False,ignore=False):\n",
        "  if(continuous):\n",
        "    fit_continuous(data)\n",
        "  else:\n",
        "    fit_discrete(data,ignore)\n",
        "\n",
        "#Remove below # in the comments if you want to test the code\n",
        "#print(\"Test Below ............ /n\")\n",
        "#data_1= [12,12,12,12,13,13,13,13,15,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,18,18,18,18,17,17,17,17,17,17,]\n",
        "#fit_distribution_test(data_1)\n",
        "\n",
        "\n",
        "#-----------------------------------------------------------------------------------------------------------------------\n",
        "#Debes subir el dataset al mismo directorio, si estas desde Google Colab, Deberia ser en /content/\n",
        "#debe tener las columnas, Date, Employee, y el dato totalizado por fecha, en este ejemplo, Bookings\n",
        "#Guardar como CSV\n",
        "#Se deben correr las primeras lineas para cargar los modulos y librerias\n",
        "\n",
        "dataset = \"\"\n",
        "columnAnalyze = \"\"\n",
        "datasetOk = \"\"\n",
        "\n",
        "def runningTheBellCurve():\n",
        "  datasetOk = input(\"\\n\\nHave you uploaded the dataset already?, YES or NO  🤔>>>>>>        \\n\")\n",
        "  datasetOk = datasetOk.lower()\n",
        "  if (datasetOk == \"yes\" or datasetOk == \"y\" or datasetOk == \"si\"):\n",
        "    print(\"\\n------------------------------------------------\\nNice 👍, thanks, now:  \\n\")\n",
        "    dataset = input(\"\\n\\nWhat is the full name (including the extension), of the dataset, make sure you save it in the same folder (possible '/content/' if you are using Google Colab) as a CSV File 📂  >>>>>>      \\n\") \n",
        "    columnAnalyze = input(\"\\n\\n What is the name of the column to analyze 📊 ?, please enter the SAME name, this is Case Sensitive 🔠🔡 >>>>>>      \\n\") \n",
        "    print(\"\\n\\n------------------------------------------------ \\nDistribution Chart\\n------------------------------------------------\\n\\n\")\n",
        "    fit_distribution(dataset,columnAnalyze)\n",
        "  else:\n",
        "    print(\"\\n\\n Please upload the dataset as a CSV File, \\n\\n Preferably, name it as data.csv, it would be easier for both of us 😊 \\n\\n\")\n",
        "    uploaded = files.upload()\n",
        "    for fn in uploaded.keys():\n",
        "      print(\"------------------------------------------------------------------------------\")\n",
        "      print('User uploaded file \"{name}\" with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))\n",
        "      print(\"------------------------------------------------------------------------------\")\n",
        "      dataset = '{name}'.format(name=fn) #Assigning the name of the just uploaded document\n",
        "    #Assigning (temporary) uploaded CSV to the dataframe variable\n",
        "    data_f=pd.read_csv(dataset)\n",
        "    print(\"\\nAvailable columns: \"+data_f.columns) #Printing Columns\n",
        "    columnAnalyze = input(\"\\n\\n What is the name of the column to analyze 📊 ?, please enter the SAME name, this is Case Sensitive 🔠🔡 >>>>>>      \\n \") \n",
        "    print(\"\\n------------------------------------------------\\n#Running this now 🚀\\n------------------------------------------------\\nDistribution Chart\\n ⏬         ⏬         ⏬\\n------------------------------------------------\\n\")\n",
        "    fit_distribution(dataset,columnAnalyze)\n",
        "  return\n",
        "\n",
        "\n",
        "#Running the Bell Curve NOW!!!\n",
        "\n",
        "#runningTheBellCurve()"
      ],
      "metadata": {
        "id": "lOjW8oMKhxml"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Now run this 🚀"
      ],
      "metadata": {
        "id": "qGLVkfyE2LqF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "runningTheBellCurve()"
      ],
      "metadata": {
        "id": "z0c7nxsE58VC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "1d00bd3e-a059-47d8-b8b0-0c34299da70f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Have you uploaded the dataset already?, YES or NO  🤔>>>>>>        \n",
            "YES\n",
            "\n",
            "------------------------------------------------\n",
            "Nice 👍, thanks, now:  \n",
            "\n",
            "\n",
            "\n",
            "What is the full name (including the extension), of the dataset, make sure you save it in the same folder (possible '/content/' if you are using Google Colab) as a CSV File 📂  >>>>>>      \n",
            "data (1).csv\n",
            "\n",
            "\n",
            " What is the name of the column to analyze 📊 ?, please enter the SAME name, this is Case Sensitive 🔠🔡 >>>>>>      \n",
            "TASK\n",
            "\n",
            "\n",
            "------------------------------------------------ \n",
            "Distribution Chart\n",
            "------------------------------------------------\n",
            "\n",
            "\n",
            "Dataset Information\n",
            "Mean:  177.54098360655738\n",
            "Sd:  65.66139753068815\n",
            "Fit Information\n",
            "Best Fit:  t\n",
            "Best Fit params:  [25.17585673900716, 176.80430309220458, 65.0945645173282]\n",
            "Best Fit SSE:  8.760072902073407e-06\n",
            "Mean Confidence Interval (95%)\n",
            "[ 160.7243188572286 ; 194.35764835588614 ]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
